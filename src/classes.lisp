
(in-package #:cl-firebird)

(defgeneric connection (object))


(defclass wire-protocol ()
  ((user)
   (password)
   (role :initform nil)
   (charset)
   (filename)
   (timezone :initform nil)
   (client-public-key)
   (client-private-key)
   (plugin-name)
   (plugin-list)
   (plugin-list*)
   (buffer :initform (make-array 65536 :element-type 'nibbles:octet))
   (socket :initform nil)
   (stream)
   (stream-cypher-recv :initform nil)
   (stream-cypher-send :initform nil)
   (auth-data)
   (accept-plugin-name :reader protocol-accept-plugin-name)
   (accept-version :reader protocol-accept-version)
   (accept-architecture :reader protocol-accept-architecture)
   (accept-type :reader protocol-accept-type)
   (lazy-response-count)
   (db-handle :initform nil :reader object-handle) ;; XXX: refactor to just handle
   (wire-crypt :initform nil)))


(defclass connection (wire-protocol)
  ((hostname :initform nil :reader connection-hostname)
   (port :reader connection-port)
   (timeout :reader connection-timeout)
   (page-size :reader connection-page-size)
   (auth-plugin-name)
   (isolation-level :accessor isolation-level)
   (use-unicode :initform nil :accessor connection-use-unicode)
   (last-event-id)
   (is-services :initform nil)
   ))


(defclass xsqlvar ()
  ((use-unicode :initform nil :reader xsqlvar-use-unicode :initarg :use-unicode)
   (sqltype :initform nil :reader xsqlvar-sqltype)
   (sqlscale :initform nil :reader xsqlvar-sqlscale)
   (sqlsubtype :initform nil :reader xsqlvar-sqlsubtype)
   (sqllen :initform nil :reader xsqlvar-sqllen)
   (null-ok :initform nil :reader xsqlvar-null-ok)
   (fieldname :initform "" :reader xsqlvar-fieldname)
   (relname :initform "" :reader xsqlvar-relname)
   (ownname :initform "" :reader xsqlvar-ownname)
   (aliasname :initform "" :reader xsqlvar-aliasname)))


(defclass transaction ()
  ((connection :initarg :conn :reader connection)
   (handle :initform nil :reader object-handle)
   (auto-commit :initform nil :reader auto-commit-p :initarg :auto-commit)
   (dirty :initform nil :reader transaction-dirty-p)))


(defclass statement ()
  ((trans :initarg :trans :accessor transaction)
   (handle :initform nil :reader object-handle)
   (open :initform nil :reader statement-open-p)
   (stmt-type :initform nil :reader statement-type)
   (plan :initform nil :reader statement-plan)
   (result :initform nil :reader statement-result)
   (xsqlda :initform nil :reader statement-xsqlda)))


(defclass blob ()
  ((blob-id :initarg :blob-id :reader blob-id)
   (subtype :initarg :subtype :reader blob-subtype)
   (data :initform nil :reader blob-data)))
